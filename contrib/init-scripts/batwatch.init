#!/bin/sh
#
# batwatch - daemon start/stop script (sysvinit)
#
# Copyright (C) 2014 Andre Erdmann <dywi@mailerd.de>
# Distributed under the terms of the GNU General Public License;
# either version 2 of the License, or (at your option) any later version.
#

### BEGIN INIT INFO
# Provides:            batwatchd
# Required-Start:      $local_fs $syslog dbus
# Required-Stop:       $local_fs $syslog dbus
# Should-Start:        $remote_fs
# Should-Stop:         $remote_fs
# Default-Start:       2 3 4 5
# Default-Stop:        0 1 6
# Short-Description:   start/stop batwatchd
# Description:         control the batwatch daemon
### END INIT INFO

: ${BATWATCH_PIDFILE:=/run/batwatch/batwatch.pid}
: ${BATWATCH_BINARY:=/usr/bin/batwatch}
: ${BATWATCH_RUNDIR:=/}
: ${BATWATCH_OPTS=}
: ${BATWATCH_USER=}
: ${BATWATCH_GROUP=}

: ${MY_SSD_OPTS=}
if [ -n "${BATWATCH_USER}" ]; then
   MY_SSD_OPTS="${MY_SSD_OPTS-} -u ${BATWATCH_USER}"
fi

if [ -n "${BATWATCH_GROUP}" ]; then
   MY_SSD_OPTS="${MY_SSD_OPTS-} -g ${BATWATCH_GROUP}"
fi

batwatch_check_exe_arg() {
   set -- ${BATWATCH_OPTS-}
   while [ ${#} -gt 0 ]; do
      case "${1}" in
         '-x'|'--exe')
            [ -z "${2-}" ] || return 0
         ;;
      esac
      shift
   done
   return 1
}

do_start() {
   start-stop-daemon --start --exec "${BATWATCH_BINARY}" \
      --pidfile "${BATWATCH_PIDFILE}" ${MY_SSD_OPTS-} -- \
      -p "${BATWATCH_PIDFILE}" -C "${BATWATCH_RUNDIR}" \
      ${BATWATCH_OPTS-}
}

do_stop() {
   start-stop-daemon --stop --exec "${BATWATCH_BINARY}" \
      --pidfile "${BATWATCH_PIDFILE}" ${MY_SSD_OPTS-} "$@"
}

do_reload() {
   do_stop --signalHUP
}

get_status() {
   do_stop --test--quiet
}

batwatch_create_svcdir() {
   local o="${BATWATCH_USER-}:${BATWATCH_GROUP-}"

   if [ ! -d "${1}" ]; then
      case "${1}" in
         ?*/?*)
            if [ -d "${1%/*}" ]; then
               true
            elif ! mkdir -p -m 0755 -- "${1%/*}"; then
               echo "Failed to create directory ${1%/*}"
               return 10
            fi
         ;;
      esac
      if ! mkdir -p -m 0750 -- "${1}"; then
         echo "Failed to create directory ${1}"
         return 11
      fi
   fi

   if [ -n "${o#:}" ]; then
      if ! chown "${o}" "${1}"; then
         echo "Failed to change ownership for ${1} to ${o}"
         return 2
      fi
   fi

   return 0
}

batwatch_prepare() {
   local d

   if ! batwatch_check_exe_arg; then
      echo "At least on --exe must be specified in \$BATWATCH_OPTS."
      return 1
   fi

   case "${BATWATCH_PIDFILE-}" in
      */batwatch/?*)
         batwatch_create_svcdir "${BATWATCH_PIDFILE%/*}" || return
      ;;
   esac

   return 0
}

if [ ! -x "${BATWATCH_BINARY}" ]; then
   log_failure_message "${BATWATCH_BINARY} not found."
   exit 5
fi

case "${1-}" in
   'start')
      log_action_msg "Starting batwatch"
      if batwatch_prepare && do_start; then
         log_success_msg "Started batwatch."
         exit 0
      else
         log_failure_msg "Failed to start batwatch."
         exit 1
      fi
   ;;
   'stop')
      log_action_msg "Stopping batwatch"
      if do_stop; then
         log_success_msg "Stopped batwatch."
         exit 0
      else
         log_failure_msg "Failed to stop batwatch."
      fi
   ;;
   'restart')
      log_action_msg "Restarting batwatch"
      if ! batwatch_prepare; then
         log_failure_message "Failed to restart batwatch."
         exit 1
      elif ! do_stop; then
         log_warning_msg "Failed to stop batwatch."
      fi

      if do_start; then
         log_success_msg "Restarted batwatch."
         exit 0
      else
         log_failure_msg "Failed to restart batwatch."
      fi
   ;;
   'status')
      if get_status; then
         log_daemon_msg "batwatch is running."
         exit 0
      else
         log_daemon_msg "batwatch is not running."
         exit 1
      fi
   ;;
   'reload'|'force-reload')
      log_action_msg "Reloading batwatch"
      if batwatch_prepare && do_reload; then
         log_success_msg "Reloaded batwatch."
         exit 0
      else
         log_failure_msg "Failed to reload batwatch."
         exit 1
      fi
   ;;
   *)
      echo "Usage: ${0} start|stop|restart|status|reload|force-reload"
      exit 2
   ;;
esac
